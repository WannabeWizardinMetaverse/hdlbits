Solution:

module top_module(
    input clk,
    input [7:0] in,
    input reset,    // Synchronous reset
    output done); //
	parameter D= 1'b0, C= 1'b1;
    reg state, next_state;
    reg [1:0] cnt;
    // State transition logic (combinational)
    always@(*)begin
        case(state)
            D: next_state= in[3]? C: D;
            C: next_state= (cnt== 2'b01)? D: C;                
        endcase
    end
    // State flip-flops (sequential)
    always@(posedge clk)begin
        if(reset) begin
            state<= D;
            cnt<= 2'b0;
        end
        else begin
            state<= next_state;
            if(state== C) cnt<= cnt+1'b1;
            else cnt<= 2'b0;
        end
    end
    // Output logic
    always@(posedge clk)begin
        if(reset)
            done<= 1'b0;
        else 
            done<= (cnt== 2'b01);
    end
endmodule
