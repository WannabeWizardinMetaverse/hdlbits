Solution:

module top_module(
    input clk,
    input areset,    // Freshly brainwashed Lemmings walk left.
    input bump_left,
    input bump_right,
    input ground,
    input dig,
    output walk_left,
    output walk_right,
    output aaah,
    output digging ); 
    
    parameter LEFT= 3'h0, RIGHT= 3'h1, FALL_L= 3'h2, FALL_R= 3'h3, DIG_L= 3'h4, DIG_R= 3'h5, SPLATTER=3'h6;
    reg [2:0] state;
    reg [2:0] next_state;
    reg [9:0] fall_cnt;
    
    always@(*)begin
        case(state)
            LEFT: next_state= ground? (dig? DIG_L: (bump_left? RIGHT: LEFT)): FALL_L;
            RIGHT: next_state= ground? (dig? DIG_R: (bump_right? LEFT: RIGHT)): FALL_R;
            FALL_L: next_state= ground? ((fall_cnt>10'd19)? SPLATTER: LEFT): FALL_L;
            FALL_R: next_state= ground? ((fall_cnt>10'd19)? SPLATTER: RIGHT): FALL_R;
            DIG_L: next_state= ground? DIG_L: FALL_L;
            DIG_R: next_state= ground? DIG_R: FALL_R;
            SPLATTER: next_state= SPLATTER;
        endcase
    end

    always@(posedge clk or posedge areset)begin
        if(areset) begin
            state<= LEFT;
            fall_cnt<= 0;
        end
        else begin
            state<= next_state;
            if(aaah)
                fall_cnt<= fall_cnt+ 1'b1;
            else
                fall_cnt<= 0;
        end
    end
    
    assign walk_left= (state== LEFT);
    assign walk_right= (state== RIGHT);
    assign aaah= ((state== FALL_L)| (state==FALL_R));
    assign digging= ((state== DIG_L)| (state==DIG_R));

endmodule
