Solution:

module top_module (
    input clk,
    input reset,
    input [3:1] s,
    output fr3,
    output fr2,
    output fr1,
    output dfr
); 
	parameter s0= 3'h0, s1_r= 3'h1, s1_f= 3'h2, s2_r= 3'h3, s2_f= 3'h4, s3= 3'h5;
    reg [2:0] state;
    reg [2:0] n_state;
    
    always@(*)begin
        case(state)
            s0: case(s)
                3'b000: n_state= s0;
                3'b001: n_state= s1_r;
                3'b011: n_state= s2_r;
                3'b111: n_state= s3;
            endcase
            s1_r: case(s)
                3'b000: n_state= s0;
                3'b001: n_state= s1_r;
                3'b011: n_state= s2_r;
                3'b111: n_state= s3;
            endcase
            s1_f: case(s)
                3'b000: n_state= s0;
                3'b001: n_state= s1_f;
                3'b011: n_state= s2_r;
                3'b111: n_state= s3;
            endcase
            s2_r: case(s)
                3'b000: n_state= s0;
                3'b001: n_state= s1_f;
                3'b011: n_state= s2_r;
                3'b111: n_state= s3;
            endcase
            s2_f: case(s)
                3'b000: n_state= s0;
                3'b001: n_state= s1_f;
                3'b011: n_state= s2_f;
                3'b111: n_state= s3;
            endcase
            s3: case(s)
                3'b000: n_state= s0;
                3'b001: n_state= s1_f;
                3'b011: n_state= s2_f;
                3'b111: n_state= s3;
            endcase
        endcase
    end
    
    always@(posedge clk)begin
        if(reset) state<= s0;
        else state<= n_state;            
    end
    
    always@(*)begin
        case(state)
            s0: {fr3,fr2,fr1,dfr}= 4'b1111;
            s1_r: {fr3,fr2,fr1,dfr}= 4'b0110;
            s1_f: {fr3,fr2,fr1,dfr}= 4'b0111;
            s2_r: {fr3,fr2,fr1,dfr}= 4'b0010;
            s2_f: {fr3,fr2,fr1,dfr}= 4'b0011;
            s3: {fr3,fr2,fr1,dfr}= 4'b0000;
        endcase
    end
endmodule
